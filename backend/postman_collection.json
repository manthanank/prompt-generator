{
  "info": {
    "name": "Prompt Generator Backend API",
    "description": "Complete API collection for testing the Prompt Generator backend endpoints with authentication, content generation, and anonymous session management",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "anon_test_session_123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "API Information",
      "item": [
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get API information, version, and available endpoints documentation"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has API info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('documentation');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('OK');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "status"]
            },
            "description": "Get detailed API status including uptime, environment, version, and available endpoints"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has detailed status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "    pm.expect(jsonData).to.have.property('environment');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData).to.have.property('endpoints');",
                  "    pm.expect(jsonData).to.have.property('database');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account. Returns JWT token and user data."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('_id');",
                  "});",
                  "",
                  "// Store the token for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"authToken\", jsonData.token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with existing user credentials. Returns JWT token and user data."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('_id');",
                  "});",
                  "",
                  "// Store the token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"authToken\", jsonData.token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get user profile (requires authentication). Returns user data without password."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('_id');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Content Generation",
      "item": [
        {
          "name": "Generate Content (Authenticated)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userPrompt\": \"Write a creative story about a magical forest\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/generate-content",
              "host": ["{{baseUrl}}"],
              "path": ["api", "generate-content"]
            },
            "description": "Generate AI content for authenticated users (unlimited access). Requires valid JWT token."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has content\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('text');",
                  "    pm.expect(jsonData).to.have.property('userType');",
                  "    pm.expect(jsonData.userType).to.eql('authenticated');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate Content (Anonymous)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Session-ID",
                "value": "{{sessionId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userPrompt\": \"Write a short poem about nature\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/generate-content",
              "host": ["{{baseUrl}}"],
              "path": ["api", "generate-content"]
            },
            "description": "Generate AI content for anonymous users (limited to 1 prompt per session/IP). Requires X-Session-ID header."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 429\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Successful response has content\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('text');",
                  "        pm.expect(jsonData).to.have.property('userType');",
                  "        pm.expect(jsonData.userType).to.eql('anonymous');",
                  "        pm.expect(jsonData).to.have.property('remainingPrompts');",
                  "        pm.expect(jsonData.remainingPrompts).to.eql(0);",
                  "    });",
                  "} else if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit response\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "        pm.expect(jsonData).to.have.property('userType');",
                  "        pm.expect(jsonData.userType).to.eql('anonymous');",
                  "        pm.expect(jsonData).to.have.property('requiresLogin');",
                  "        pm.expect(jsonData.requiresLogin).to.be.true;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Check Anonymous Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Session-ID",
                "value": "{{sessionId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/anonymous-status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "anonymous-status"]
            },
            "description": "Check anonymous user status and prompt usage. Returns hasUsedFreePrompt, remainingPrompts, and message."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('hasUsedFreePrompt');",
                  "    pm.expect(jsonData).to.have.property('userType');",
                  "    pm.expect(jsonData.userType).to.eql('anonymous');",
                  "    pm.expect(jsonData).to.have.property('remainingPrompts');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(typeof jsonData.hasUsedFreePrompt).to.eql('boolean');",
                  "    pm.expect(typeof jsonData.remainingPrompts).to.eql('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Check Free Prompt Used",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Session-ID",
                "value": "{{sessionId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/check-free-prompt",
              "host": ["{{baseUrl}}"],
              "path": ["api", "check-free-prompt"]
            },
            "description": "Check if anonymous user has used their free prompt. Checks both session ID and IP address for last 24 hours."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('hasUsedFreePrompt');",
                  "    pm.expect(jsonData).to.have.property('userType');",
                  "    pm.expect(jsonData.userType).to.eql('anonymous');",
                  "    pm.expect(jsonData).to.have.property('remainingPrompts');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(typeof jsonData.hasUsedFreePrompt).to.eql('boolean');",
                  "    pm.expect(typeof jsonData.remainingPrompts).to.eql('number');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Testing & Debug",
      "item": [
        {
          "name": "Test Content Routes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test"]
            },
            "description": "Test if content routes are working. Simple endpoint to verify API connectivity."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('working');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Clear All Sessions",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/clear-sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "clear-sessions"]
            },
            "description": "Clear all anonymous sessions (for testing purposes). Use this to reset anonymous user limits."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('cleared');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate New Session ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/check-free-prompt",
              "host": ["{{baseUrl}}"],
              "path": ["api", "check-free-prompt"]
            },
            "description": "Generate a new session ID for testing. This endpoint will create a new session if none exists."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates available prompt\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.hasUsedFreePrompt).to.be.false;",
                  "    pm.expect(jsonData.remainingPrompts).to.eql(1);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
